import os
from core.classes import Cog_Extension
import openai
import discord
import time
from discord import app_commands

api_key = os.getenv("OPENAI_API_KEY")

context_store = {}
cooldowns_translate = {}
cooldowns_search = {}

cooldowns = {}

cooldowns_ai = {}

class Instruments(Cog_Extension):
    @app_commands.command(name="translate", description="–ê–π–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —è–∑—ã–∫")
    @app_commands.choices(target_language=[
        app_commands.Choice(name="Emoji üÜï", value="Emoji"),
        app_commands.Choice(name="–≠–ª—å—Ñ–∏—Å–∫–∏–π üÜï", value="Emoji"),
        app_commands.Choice(name="–î–≤–∞—Ä—Ñ–æ–≤—Å–∫–∏–π üÜï", value="Dwarvish"),
        app_commands.Choice(name="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", value="ENG"),
        app_commands.Choice(name="–†—É—Å—Å–∫–∏–π", value="RUS"),
        app_commands.Choice(name="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", value="FRA"),
        app_commands.Choice(name="–ò—Å–ø–∞–Ω—Å–∫–∏–π", value="SPA"),
        app_commands.Choice(name="–ù–µ–º–µ—Ü–∫–∏–π", value="GER"),
        app_commands.Choice(name="–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", value="ITA"),
        app_commands.Choice(name="–ö–∏—Ç–∞–π—Å–∫–∏–π", value="CHI"),
        app_commands.Choice(name="–Ø–ø–æ–Ω—Å–∫–∏–π", value="JAP"),
        app_commands.Choice(name="–ö–æ—Ä–µ–π—Å–∫–∏–π", value="KOR"),
    ])
    async def translate_text(self, interaction: discord.Interaction, target_language: str, *, text: str):
        await interaction.response.defer()

        try:
            user_id = interaction.user.id
            current_time = time.time()
            last_used_time = cooldowns_translate.get(user_id, 0)

            if str(user_id) in open("blocked_users.txt").read():
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            user_folder = os.path.join("aika_users", str(user_id))

            if not os.path.exists(user_folder):
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–•–º, –ø–æ—Ö–æ–∂–µ —è —Å –≤–∞–º–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/register` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            plan_file_path = os.path.join(user_folder, "plus", "plan.txt")

            if not os.path.exists(plan_file_path):
                cooldown = 600
            else:
                with open(plan_file_path, "r") as plan_file:
                    plan_text = plan_file.read().strip()

                if plan_text in ["Basic", "Standart", "Ultimate", "Excelsior"]:
                    cooldown = 0
                else:
                    cooldown = 600

            if current_time - last_used_time < cooldown:
                error_message = f"–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ {int(cooldown / 60)} –º–∏–Ω—É—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ `/plus`"
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description=error_message, color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            prompt = f'–¶–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ (–µ—Å–ª–∏ —Ü–µ–ª—å Emoji —Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫–∏): {target_language}\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: {text}'

            response = openai.Completion.create(
                engine="text-davinci-003",
                prompt=prompt,
                max_tokens=1024,
                api_key=api_key
            )
            translated_text = response.choices[0].text.strip()

            log_embed = discord.Embed(title="Aika Translator Log", color=0x00ff00)
            log_embed.add_field(name="User", value=interaction.user.display_name, inline=False)
            log_embed.add_field(name="User ID", value=interaction.user.id, inline=False)
            log_embed.add_field(name="Server", value=interaction.guild.name if interaction.guild else "Direct Message", inline=False)
            log_embed.add_field(name="Server ID", value=interaction.guild.id if interaction.guild else "N/A", inline=False)
            log_embed.add_field(name="Channel", value=interaction.channel.name if isinstance(interaction.channel, discord.TextChannel) else "Direct Message", inline=False)
            log_embed.add_field(name="Target Language", value=target_language, inline=False)
            log_embed.add_field(name="Text", value=text, inline=False)
            log_embed.add_field(name="Translated Text", value=translated_text, inline=False)
            channel_id = 000000000000000000
            channel = self.bot.get_channel(channel_id)
            if channel:
                await channel.send(embed=log_embed)

            embed = discord.Embed(title="Aika –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", color=0x921294)
            embed.add_field(name="–¶–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞", value=target_language, inline=False)
            embed.add_field(name="–ü–µ—Ä–µ–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç", value=f"```{translated_text}```", inline=False)
            await interaction.followup.send(embed=embed)

            cooldowns_translate[user_id] = current_time
        except Exception as e:
            print(f"{e}")
            error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description=f"–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ê–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ —É–¥–∞–ª—è—Ç—å –ê–π–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.", color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)

    @app_commands.command(name="search", description="–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Aika Aidex (beta)")
    async def search(self, interaction: discord.Interaction, search_query: str):
        await interaction.response.defer()
        user_id = str(interaction.user.id)
        current_time = time.time()
        last_used_time = cooldowns_search.get(user_id, 0)
        plan_file_path = f"aika_users/{user_id}/plus/plan.txt"

        with open('blocked_users.txt', 'r') as f:
            blocked_users = [line.strip().split('#')[0] for line in f]

        if str(interaction.user.id) in blocked_users:
            await interaction.followup.send("–û—à–∏–±–∫–∞: –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return

        if not os.path.exists(plan_file_path):
            cooldown = 600
        else:
            with open(plan_file_path, 'r') as plan_file:
                plan_text = plan_file.read().strip()
            if plan_text != "Excelsior" and current_time - last_used_time < 600:
                error_message = f"–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞ –≤ 10 –º–∏–Ω—É—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ `/plus`\n–ú—ã —Ç–∞–∫–∂–µ –≤–µ–¥–µ–º –Ω–∞–±–æ—Ä –≤ –Ω–∞—à—É PR –∏ –≤ —Å–ª—É—á–∞–µ –≤–∞—à–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å—Ä–æ—á–Ω—ã–π Premium. [–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç](https://discord.com/channels/1011882995076050987/1112087346549100727)"
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description=error_message, color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

        cooldowns_search[user_id] = current_time

        try:
            user_id = interaction.user.id
            if str(user_id) in open("blocked_users.txt").read():
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return
            user_folder = os.path.join("aika_users", str(user_id))
            if not os.path.exists(user_folder):
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–•–º, –ø–æ—Ö–æ–∂–µ —è —Å –≤–∞–º–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/register` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            prompt_short_answer = f"–ß—Ç–æ —Ç–∞–∫–æ–µ {search_query}?"
            response_short_answer = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system",
                     "content": "You are a search assistant named Aika Search. Your task is to give answers to user requests no longer than 512 characters."},
                    {"role": "user", "content": prompt_short_answer}
                ],
                api_key=api_key
            )
            short_answer = response_short_answer.choices[0].message.content.strip()

            prompt_search_results = f"Chatting in –†—É—Å—Å–∫–∏–π. You are a search engine named Aika Search. Your task is to display a list of sites corresponding to the request for each request and give it a brief description. An example of showing the site **[Site name](link to the site)** is a brief description of the site. You must send only a list of sites without external additions and introductions, only a list of sites and nothing more. My query: {search_query}."

            response_search_results = openai.Completion.create(
                engine="text-davinci-003",
                max_tokens=1024,
                prompt=prompt_search_results,
                api_key=api_key
            )
            search_results = response_search_results.choices[0].text.strip()

            log_embed = discord.Embed(title="Aika Aidex Log", color=0x00ff00)
            log_embed.add_field(name="User", value=interaction.user.display_name, inline=False)
            log_embed.add_field(name="User ID", value=interaction.user.id, inline=False)
            log_embed.add_field(name="Server", value=interaction.guild.name if interaction.guild else "Direct Message", inline=False)
            log_embed.add_field(name="Server ID", value=interaction.guild.id if interaction.guild else "N/A", inline=False)
            log_embed.add_field(name="Channel", value=interaction.channel.name if isinstance(interaction.channel, discord.TextChannel) else "Direct Message", inline=False)
            log_embed.add_field(name="Query", value=search_query, inline=False)
            log_embed.add_field(name="Short answer", value=short_answer, inline=False)
            log_embed.add_field(name="Search result", value=search_results, inline=False)
            channel_id = 000000000000000000
            channel = self.bot.get_channel(channel_id)
            if channel:
                await channel.send(embed=log_embed)

            embed = discord.Embed(title="Aika Aidex (beta)", color=0x921294)
            embed.add_field(name="–ó–∞–ø—Ä–æ—Å:", value=f"{search_query}", inline=False)
            if not os.path.exists(plan_file_path) or plan_text in ["Free", "Basic", "Standart"]:
                embed.add_field(name="Aika AI:", value=f'```{short_answer}```', inline=False)
                embed.add_field(name="–†–µ–∫–ª–∞–º–∞:", value='**–ú—ã –≤–µ–¥–µ–º –Ω–∞–±–æ—Ä –≤ –Ω–∞—à—É PR –∏ –≤ —Å–ª—É—á–∞–µ –≤–∞—à–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å—Ä–æ—á–Ω—ã–π Premium. [–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç](https://discord.com/channels/1011882995076050987/1112087346549100727)**', inline=False)
            else:
                embed.add_field(name="Aika AI:", value=f'```{short_answer}```', inline=False)
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:", value=search_results, inline=False)
            embed.set_footer(text=f"Powered by Aika Aidex", icon_url="https://example.com/")
            await interaction.followup.send(embed=embed)

        except Exception as e:
            print(f"{e}")
            error_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ê–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ —É–¥–∞–ª—è—Ç—å –ê–π–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
            error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description=error_message, color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)

    @app_commands.command(name="gen-bot", description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    @app_commands.choices(platform=[
        app_commands.Choice(name="VK", value="vk"),
        app_commands.Choice(name="Discord", value="discord"),
        app_commands.Choice(name="Telegram", value="telegram")
    ])
    @app_commands.choices(lang=[
        app_commands.Choice(name="Python", value="python"),
        app_commands.Choice(name="JavaScript", value="javascript")
    ])
    async def generate_bot(self, interaction: discord.Interaction, platform: str, lang: str, *, prompt: str):
        await interaction.response.defer()

        try:
            user_id = interaction.user.id
            user_folder = os.path.join("aika_users", str(user_id))
            plan_file_path = os.path.join(user_folder, "plus", "plan.txt")

            if str(user_id) in open("blocked_users.txt").read():
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            if not os.path.exists(user_folder):
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–•–º, –ø–æ—Ö–æ–∂–µ —è —Å –≤–∞–º–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/register` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            if not os.path.exists(plan_file_path):
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ Ultimate –∏ Excelsior.", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            with open(plan_file_path, "r") as plan_file:
                plan_text = plan_file.read().strip()

            if plan_text not in ["Ultimate", "Excelsior"]:
                error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ Ultimate –∏ Excelsior.", color=discord.Color.red())
                await interaction.followup.send(embed=error_embed, ephemeral=True)
                return

            prompt_gen = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ –¥–ª—è –±–æ—Ç–∞ {platform} –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è {lang}. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {prompt}."

            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=prompt_gen,
                max_tokens=2048,
                api_key=api_key
            )
            generated_code = response.choices[0].text.strip()

            log_embed = discord.Embed(title="Aika Gen Bots Log", color=0x00ff00)
            log_embed.add_field(name="User", value=interaction.user.display_name, inline=False)
            log_embed.add_field(name="User ID", value=interaction.user.id, inline=False)
            log_embed.add_field(name="Server", value=interaction.guild.name if interaction.guild else "Direct Message", inline=False)
            log_embed.add_field(name="Server ID", value=interaction.guild.id if interaction.guild else "N/A", inline=False)
            log_embed.add_field(name="Channel", value=interaction.channel.name if isinstance(interaction.channel, discord.TextChannel) else "Direct Message", inline=False)
            log_embed.add_field(name="Platform", value=platform, inline=False)
            log_embed.add_field(name="Lang", value=lang, inline=False)
            log_embed.add_field(name="Prompt", value=prompt, inline=False)
            log_embed.add_field(name="Code", value=generated_code, inline=False)
            channel_id = 000000000000000000
            channel = self.bot.get_channel(channel_id)
            if channel:
                await channel.send(embed=log_embed)

            file_extension = "py" if lang == "python" else "js"
            file_name = f"{platform}_{lang}_bot_{user_id}.{file_extension}"

            with open(os.path.join("tempbots", file_name), "w") as bot_file:
                bot_file.write(generated_code)

            await interaction.followup.send("–í–∞—à –±–æ—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.", file=discord.File(os.path.join("tempbots", file_name)))
        except Exception as e:
            print(f"{e}")
            error_embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ê–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ —É–¥–∞–ª—è—Ç—å –ê–π–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.", color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(Instruments(bot))